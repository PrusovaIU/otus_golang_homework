// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Process is an autogenerated mock type for the Process type
type Process struct {
	mock.Mock
}

type Process_Expecter struct {
	mock *mock.Mock
}

func (_m *Process) EXPECT() *Process_Expecter {
	return &Process_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields:
func (_m *Process) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Process_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Process_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Process_Expecter) Start() *Process_Start_Call {
	return &Process_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Process_Start_Call) Run(run func()) *Process_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Start_Call) Return(_a0 error) *Process_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_Start_Call) RunAndReturn(run func() error) *Process_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields:
func (_m *Process) Wait() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Process_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type Process_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *Process_Expecter) Wait() *Process_Wait_Call {
	return &Process_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *Process_Wait_Call) Run(run func()) *Process_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Wait_Call) Return(_a0 error) *Process_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Process_Wait_Call) RunAndReturn(run func() error) *Process_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcess creates a new instance of Process. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcess(t interface {
	mock.TestingT
	Cleanup(func())
}) *Process {
	mock := &Process{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
