// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BufferByteWriter is an autogenerated mock type for the BufferByteWriter type
type BufferByteWriter struct {
	mock.Mock
}

type BufferByteWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *BufferByteWriter) EXPECT() *BufferByteWriter_Expecter {
	return &BufferByteWriter_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with given fields:
func (_m *BufferByteWriter) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BufferByteWriter_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type BufferByteWriter_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *BufferByteWriter_Expecter) Flush() *BufferByteWriter_Flush_Call {
	return &BufferByteWriter_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *BufferByteWriter_Flush_Call) Run(run func()) *BufferByteWriter_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BufferByteWriter_Flush_Call) Return(_a0 error) *BufferByteWriter_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BufferByteWriter_Flush_Call) RunAndReturn(run func() error) *BufferByteWriter_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// WriteByte provides a mock function with given fields: _a0
func (_m *BufferByteWriter) WriteByte(_a0 byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BufferByteWriter_WriteByte_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteByte'
type BufferByteWriter_WriteByte_Call struct {
	*mock.Call
}

// WriteByte is a helper method to define mock.On call
//   - _a0 byte
func (_e *BufferByteWriter_Expecter) WriteByte(_a0 interface{}) *BufferByteWriter_WriteByte_Call {
	return &BufferByteWriter_WriteByte_Call{Call: _e.mock.On("WriteByte", _a0)}
}

func (_c *BufferByteWriter_WriteByte_Call) Run(run func(_a0 byte)) *BufferByteWriter_WriteByte_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *BufferByteWriter_WriteByte_Call) Return(_a0 error) *BufferByteWriter_WriteByte_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BufferByteWriter_WriteByte_Call) RunAndReturn(run func(byte) error) *BufferByteWriter_WriteByte_Call {
	_c.Call.Return(run)
	return _c
}

// NewBufferByteWriter creates a new instance of BufferByteWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBufferByteWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BufferByteWriter {
	mock := &BufferByteWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
