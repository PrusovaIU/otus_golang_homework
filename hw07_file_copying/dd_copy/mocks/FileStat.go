// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// FileStat is an autogenerated mock type for the FileStat type
type FileStat struct {
	mock.Mock
}

type FileStat_Expecter struct {
	mock *mock.Mock
}

func (_m *FileStat) EXPECT() *FileStat_Expecter {
	return &FileStat_Expecter{mock: &_m.Mock}
}

// Stat provides a mock function with given fields:
func (_m *FileStat) Stat() (fs.FileInfo, error) {
	ret := _m.Called()

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (fs.FileInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() fs.FileInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileStat_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type FileStat_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
func (_e *FileStat_Expecter) Stat() *FileStat_Stat_Call {
	return &FileStat_Stat_Call{Call: _e.mock.On("Stat")}
}

func (_c *FileStat_Stat_Call) Run(run func()) *FileStat_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileStat_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *FileStat_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileStat_Stat_Call) RunAndReturn(run func() (fs.FileInfo, error)) *FileStat_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileStat creates a new instance of FileStat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStat(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStat {
	mock := &FileStat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
