// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

type File_Expecter struct {
	mock *mock.Mock
}

func (_m *File) EXPECT() *File_Expecter {
	return &File_Expecter{mock: &_m.Mock}
}

// Seek provides a mock function with given fields: _a0, _a1
func (_m *File) Seek(_a0 int64, _a1 int) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, int) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// File_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type File_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 int
func (_e *File_Expecter) Seek(_a0 interface{}, _a1 interface{}) *File_Seek_Call {
	return &File_Seek_Call{Call: _e.mock.On("Seek", _a0, _a1)}
}

func (_c *File_Seek_Call) Run(run func(_a0 int64, _a1 int)) *File_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int))
	})
	return _c
}

func (_c *File_Seek_Call) Return(_a0 int64, _a1 error) *File_Seek_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *File_Seek_Call) RunAndReturn(run func(int64, int) (int64, error)) *File_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields:
func (_m *File) Stat() (fs.FileInfo, error) {
	ret := _m.Called()

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (fs.FileInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() fs.FileInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// File_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type File_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
func (_e *File_Expecter) Stat() *File_Stat_Call {
	return &File_Stat_Call{Call: _e.mock.On("Stat")}
}

func (_c *File_Stat_Call) Run(run func()) *File_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *File_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *File_Stat_Call) RunAndReturn(run func() (fs.FileInfo, error)) *File_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
